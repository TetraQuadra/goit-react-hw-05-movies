{"version":3,"file":"static/js/76.15dbf747.chunk.js","mappings":"gNACA,EAAgC,4BAAhC,EAA2E,2BAA3E,EAAiH,uBAAjH,EAAoJ,wBAApJ,EAAyL,yBAAzL,EAA8P,wBAA9P,EAAkS,wBAAlS,EAAsU,wBAAtU,EAA0W,wB,SC8D1W,MApDA,YAAyB,IAATA,EAAQ,EAARA,KACd,GAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAsBA,OAnBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgBC,SAASC,iBAAiB,OAC5CC,EAAe,EACbC,EAAkB,aACtBD,IACqBH,EAAcK,QACjCP,GAAa,EAEhB,EAEDE,EAAcM,SAAQ,SAACC,GACjBA,EAAIC,SACNJ,IAEAG,EAAIE,iBAAiB,OAAQL,EAEhC,GACF,GAAE,KAID,gCACGP,IAAa,SAACa,EAAA,EAAD,KAEd,iBAAKC,UAAWd,EAAYe,EAAmBA,EAA/C,WACE,eAAID,UAAWC,EAAf,mBACA,gBAAKD,UAAWC,EAAhB,SACGjB,EAAKkB,KAAI,SAAAC,GAAK,OACb,iBAAKH,UAAWC,EAAhB,WACE,gBACED,UAAWC,EACXG,IAAKD,EAAME,aAAN,0CAAwDF,EAAME,cAjC9D,8EAkCLC,IAAKH,EAAMI,QAEb,iBAAKP,UAAWC,EAAhB,WACE,cAAGD,UAAWC,EAAd,SAAiCE,EAAMI,QACvC,eAAGP,UAAWC,EAAd,wBAA4CE,EAAMK,kBARfL,EAAMM,GADhC,WAiBxB,C","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castContainer\":\"Cast_castContainer__NIXqj\",\"sectionTitle\":\"Cast_sectionTitle__UGOi-\",\"castList\":\"Cast_castList__ARoWn\",\"actorCard\":\"Cast_actorCard__1vCPH\",\"actorImage\":\"Cast_actorImage__IECZO\",\"noImage\":\"Cast_noImage__2zKj4\",\"actorInfo\":\"Cast_actorInfo__8ZWx-\",\"actorName\":\"Cast_actorName__XabVA\",\"character\":\"Cast_character__tKDlA\",\"isLoading\":\"Cast_isLoading__r+0EZ\"};","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Loader from 'components/Loader/Loader';\nimport styles from './Cast.module.css';\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.object\n  ).isRequired,\n};\n\nfunction Cast({ cast }) {\n  const [isLoading, setIsLoading] = useState(true);\n  const defaultImg = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\n  useEffect(() => {\n    const imageElements = document.querySelectorAll(\"img\");\n    let imagesLoaded = 0;\n    const handleImageLoad = () => {\n      imagesLoaded++;\n      if (imagesLoaded === imageElements.length) {\n        setIsLoading(false);\n      }\n    };\n\n    imageElements.forEach((img) => {\n      if (img.complete) {\n        handleImageLoad();\n      } else {\n        img.addEventListener(\"load\", handleImageLoad);\n      }\n    });\n  }, []);\n\n  return (\n\n    <>\n      {isLoading && <Loader />}\n      {/* images will be hidden untill they will fully load */}\n      <div className={isLoading ? styles.isLoading : styles.castContainer}>\n        <h2 className={styles.sectionTitle}>Cast</h2>\n        <div className={styles.castList}>\n          {cast.map(actor => (\n            <div className={styles.actorCard} key={actor.id}>\n              <img\n                className={styles.actorImage}\n                src={actor.profile_path ? `https://image.tmdb.org/t/p/w200/${actor.profile_path}` : defaultImg}\n                alt={actor.name}\n              />\n              <div className={styles.actorInfo}>\n                <p className={styles.actorName}>{actor.name}</p>\n                <p className={styles.character}>Character: {actor.character}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\n\n\nexport default Cast;\n"],"names":["cast","useState","isLoading","setIsLoading","useEffect","imageElements","document","querySelectorAll","imagesLoaded","handleImageLoad","length","forEach","img","complete","addEventListener","Loader","className","styles","map","actor","src","profile_path","alt","name","character","id"],"sourceRoot":""}